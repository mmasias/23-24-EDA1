@startuml diagrama
class Alimento {
    - nombre: String
    - gramos: int
    + Alimento(nombre: String, gramos: int)
    + getNombre(): String
    + setNombre(nombre: String): void
    + getGramos(): int
    + setGramos(gramos: int): void
    + compareTo(o: Alimento): int
    + toString(): String
}

class DatosArbol {
    + getInfo(): String
}

interface Comparable<T> {
    + compareTo(o: T): int
}

class Arbol<T extends DatosArbol> {
    - raiz: NodoArbol<T>
    + Arbol(raiz: NodoArbol<T>)
    + getRaiz(): NodoArbol<T>
    + setRaiz(raiz: NodoArbol<T>): void
    + preOrden(raiz: NodoArbol<T>, nivel: String): void
    + postOrden(nodo: NodoArbol<T>): void
    + totalCaloriasEnc(nodo: NodoArbol<T>): int
    + totalAzucarEnc(nodo: NodoArbol<T>): int
    + totalProteinasEnc(nodo: NodoArbol<T>): int
    + totalGrasasEnc(nodo: NodoArbol<T>): int
    + totalTipoEnc(nodo: NodoArbol<T>, nombre: String): int
}

class Dia {
    - dia: int
    + Dia(dia: int)
    + getDia(): int
    + setDia(dia: int): void
    + getInfo(): String
}

class Encuesta {
    - fecha: LocalDate
    + Encuesta(fecha: LocalDate)
    + getFecha(): LocalDate
    + setFecha(fecha: LocalDate): void
    + getInfo(): String
}

class GenericList<T extends Comparable<T>> {
    - first: GenericNode<T>
    + size(): int
    + isEmpty(): boolean
    + insertFront(value: T): void
    + insertEnd(value: T): void
    + deleteFront(): void
    + getFirst(): GenericNode<T>
    + getLast(): GenericNode<T>
    + listAll(): Object[]
    + getObjeto(posicion: int): T
    + insertarEnOrden(value: T): void
    + vaciar(): void
    + getValorPorPosicion(pos: int): T
    + indexOf(value: T): int
}

class GenericNode<T> {
    - value: T
    - next: GenericNode<T>
    + GenericNode(value: T)
    + getValue(): T
    + setValue(newValue: T): void
    + getNext(): GenericNode<T>
    + setNext(siguiente: GenericNode<T>): void
}

class Gestion {
    - sc: Scanner
    - arbol: Arbol<DatosArbol>
    - formato: DateTimeFormatter
    + Gestion()
    + insertarPaciente(): void
    + insertarEncuesta(): void
    + insertarDias(): void
    + insertarIngestas(): void
    + capturarDatos(): void
    + mostrar(): void
    + existeNodoIngesta(dia: int, horario: Horario): NodoArbol<DatosArbol>
    + estadisticas(): void
}

enum Horario {
    DESAYUNO,
    MEDIAMAÃ‘ANA,
    ALMUERZO,
    MERIENDA,
    CENA
}

class Ingesta {
    - horario: Horario
    - alimentos: GenericList<Alimento>
    + Ingesta(horario: Horario)
    + getHorario(): Horario
    + setHorario(horario: Horario): void
    + getAlimentos(): GenericList<Alimento>
    + insertarAlimento(alimento: Alimento): void
    + compareTo(o: Ingesta): int
    + getInfo(): String
    + vaciar(): void
    + totalCalorias(): double
    + totalAzucar(): double
    + totalProteinas(): double
    + totalGrasas(): double
    + totalTipo(nombreTipo: String): int
}

class NodoArbol<T extends DatosArbol> {
    - valor: T
    - hijos: GenericList<NodoArbol<T>>
    + getValor(): T
    + setValor(valor: T): void
    + getHijos(): GenericList<NodoArbol<T>>
    + setHijos(hijos: GenericList<NodoArbol<T>>): void
    + NodoArbol(valor: T)
    + insertarHijos(hijo: NodoArbol<T>): void
    + compareTo(o: NodoArbol<T>): int
}

class Paciente {
    - nombre: String
    - fechaDeAlta: LocalDate
    + getNombre(): String
    + setNombre(nombre: String): void
    + getFechaDeAlta(): LocalDate
    + setFechaDeAlta(fechaDeAlta: LocalDate): void
    + Paciente(nombre: String, fechaDeAlta: LocalDate)
    + getInfo(): String
}

Paciente --|> Dia
Paciente --|> Encuesta
Paciente --|> Arbol
Encuesta --|> Ingesta
Dia --|> Ingesta
Encuesta --|> Gestion
Ingesta --|> Alimento
Comparable --|> GenericList
DatosArbol <|-- Alimento
DatosArbol <|-- Encuesta
DatosArbol <|-- Dia
DatosArbol <|-- Ingesta
DatosArbol <|-- Paciente
DatosArbol <|-- NodoArbol
DatosArbol <|-- GenericNode
DatosArbol <|-- GenericList
Alimento <|-- Comparable
Ingesta <|-- Comparable
NodoArbol <|-- Comparable
GenericNode <|-- Comparable
Ingesta --> Horario


@enduml