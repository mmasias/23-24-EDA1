@startuml
'https://plantuml.com/class-diagram

class main{
+ int cantidadDias
+ Lista<String> listaComidasPorDias
+ Lista<String> nombresUsuarios
+ void iniciarSimulacion()
+ void imprimirListaDePersonas()
}

class Arbol{
- Nodo<T> raiz
+ Arbol(T dato)
+ Nodo<T> agregar(T dato, Nodo<T> padre)
+ int size(Nodo<T> nodoActual, int contador)
+ void imprimirArbol(Nodo<T> nodoActual, int nivel)
+ Nodo<T> getRaiz()
+ void setRaiz(Nodo<T> raiz)
}

class Simulacion{
- Lista<String> nombresUsuarios
- Lista<String> listaComidasPorDias
- int cantidadDias
- Lista<Arbol> listaArbolesCreados

+ Simulacion(Lista<String> nombresUsuarios, Lista<String> listaComidasPorDias, int cantidadDias)
+ Simulacion()
+ void imprimirFormularioInicial()
+ void opcionesFormularioInicial(int opcion)
+ String vistaCreacionPacientes()
+ void creacionPacientes(Lista<String> nombresUsuarios)
+ void imprimirFormularioFinal()
+ void opcionesFormularioFinal(int opcion)
+ void elegirArbolPaciente()
+ void imprimirFormularioInscripcion()
+ Lista<Arbol> crearArbolPaciente(String nombreUsuario)
+ void poblandoArbol(Arbol arbol)
+ Nodo formularioInscripcionPorDias(Arbol paciente)
+ void a√±adirAlimentos(Nodo nodo, Arbol paciente)
+ String articuloComidas(String comida)
}


class Nodo<T>{
- Nodo<T> siguiente
- T dato
- Lista<T> hijos
+ Nodo(T dato)
+ Nodo<T> getSiguiente()
+ void setSiguiente(Nodo<T> node)
+ Lista<T> getHijos()
+ T getDato()
+ String toString()
}

class Lista<T>{
- Nodo<T> primero
+ Lista()
+ Nodo<T> getPrimero()
+ int size()
+ void agregar(Nodo<T> node)
+ void agregarEn(Nodo<T> node, int index)
+ void eliminar(int index)
+ boolean isEmpty()
+ Nodo<T> get(int index)
+ void imprimirLista(Lista<T> lista)
+ void busqueda(String nombreUsuario, Lista<String> nombresUsuarios)
}

main -- Lista
main -- Simulacion
Simulacion -- Lista
Lista -- Arbol
Lista -- Nodo

Arbol -- Nodo



@enduml